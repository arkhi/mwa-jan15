// # Mixins
//
// <p>Reusable blocks for sass</p>
//
// No styleguide reference.
// =================================================================================================

// # Pseudo-elements
//
// No styleguide reference.
// =================================================================================================
// Default styles for :before pseudo-element
// 
// $margin - Right margin (5px)
//
// Compatibility untested.
@mixin pseudo-element-before($margin:5px) {
  @include inline-block;
  vertical-align: middle;
  margin-right: $margin;
  content: "";
}

// Styles if :before is used for img
//
// $sprite-map - resource containing the assembled sprites
// $sprite     - name of the sprite in the sprite map
// $margin     - margin to the right of the image (5px)
//
// Compatibility untested.
@mixin pseudo-element-before-img($sprite-map, $sprite, $margin:5px) {
  @include pseudo-element-before($margin);
  width: image-width(sprite-file($sprite-map, $sprite));
  height: image-height(sprite-file($sprite-map, $sprite));
  background: transparent sprite-url($sprite-map) no-repeat sprite-position($sprite-map, $sprite);
}

// # Margins
//
// No styleguide reference.
// =================================================================================================
// Creates margins based on the base font (horizontal or vertical).
// 
// $margin-top    - top margin (1rem)
// $margin-right  - right margin (1rem)
// $margin-bottom - bottom margin (1rem)
// $margin-left   - left margin (1rem)
//
// Compatibility untested.
@mixin margins($margin-top:1, $margin-right:1, $margin-bottom:1, $margin-left:1) {
  margin: #{$margin-top * $font-size-default}px
    #{$margin-right * $font-size-default}px
    #{$margin-bottom * $font-size-default}px
    #{$margin-left * $font-size-default}px;
  margin: #{$margin-top}rem
    #{$margin-right}rem
    #{$margin-bottom}rem
    #{$margin-left}rem;
}

// Creates horizontal margins based on the base font.
// "auto" is supported.
// 
// $margin-right - right margin (1rem)
// $margin-left  - left margin (1rem)
//
// Compatibility untested.
@mixin margins-horizontal($margin-right:1, $margin-left:1) {
  @if $margin-right != auto {
    $margin-right: #{$margin-right * $font-size-default}px;
  }
  @if $margin-left != auto {
    $margin-left: #{$margin-left * $font-size-default}px;
  }
  margin: 0
    $margin-right
    0
    $margin-left;

  @if $margin-right != auto {
    $margin-right: #{$margin-right}rem;
  }
  @if $margin-left != auto {
    $margin-left: #{$margin-left}rem;
  }
  margin: 0
    $margin-right
    0
    $margin-left;
}

// Creates vertical margins based on the base font.
// 
// $margin-top    - top margin (1rem)
// $margin-bottom - bottom margin (1rem)
//
// Compatibility untested.
@mixin margins-vertical($margin-top:1, $margin-bottom:1) {
  $margin-top-px: $margin-top;
  $margin-bottom-px: $margin-bottom;
  @if $margin-top != auto {
    $margin-top-px: #{$margin-top * $font-size-default}px;
  }
  @if $margin-bottom != auto {
    $margin-bottom-px: #{$margin-bottom * $font-size-default}px;
  }
  margin: $margin-top-px
    0
    $margin-bottom-px
    0;

  $margin-top-rem: $margin-top;
  $margin-bottom-rem: $margin-bottom;
  @if $margin-top != auto {
    $margin-top-rem: #{$margin-top}rem;
  }
  @if $margin-bottom != auto {
    $margin-bottom-rem: #{$margin-bottom}rem;
  }
  margin: $margin-top-rem
    0
    $margin-bottom-rem
    0;
}

// # Text
//
// No styleguide reference.
// =================================================================================================
// Truncates a block element's text and add an ellipsis.
//
// $align     - vertical alignment of the block (baseline)
// $max-width - max-width of the block (18em)
//
// Compatibility untested.
@mixin ellipsis($align:baseline, $max-width:18em) {
  max-width: $max-width;
  overflow: hidden;
  white-space: nowrap;
  vertical-align: $align;
  text-overflow: ellipsis;
}

// Provides a failsafe solution for relative dimensions:
// - px units for all browsers
// - rem units for browsers supporting this unit
// 
// $factor - multiplier of the default font-size (1)
// 
// Compatibility untested.
@mixin font-size($factor:1) {
// for old browsers
  font-size: #{$factor * $font-size-default}px;
// for decent browsers
  font-size: #{$factor}rem;
}

// # Borders
//
// No styleguide reference.
// =================================================================================================
// Creates default border radius.
//
// Compatibility untested.
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}
@mixin border-radius-s {
  @include border-radius(4px);
}
@mixin border-radius-m {
  @include border-radius(8px);
}
@mixin border-radius-l {
  @include border-radius(16px);
}

// # Interface
//
// No styleguide reference.
// =================================================================================================
// TODO: Default styles for a button and its different states
//
// $background - color used for background and gradient ($color-light-gray)
// $border     - color used for the border and shadows ($color-dark-main)
// $font-size  - font-size of the buttons (16)
// $color      - default foreground color ($color-light-main)
//
// Compatibility untested.
@mixin button($background:$color-light-gray, $border:$color-dark-main, $font-size:1.6, $color:$color-light-main) {
  // Logic
  @if lightness($background) > 90% {
    $background: darken($background, 10%);
  }

  // Change default colors if background is bright
  @if lightness($background) > 50% {
    // Make sure to not overwrite the user-defined color
    @if $color == $color-light-main {
      @include text-shadow(
        rgba(0, 0, 0, 0.1) 0 -1px 0,
        $color-light-main 0 1px 2px
      );
      $color: $color-shadow-gray;
    }
  }
  @else {
    @include text-shadow(
      rgba(0, 0, 0, 0.25) 0 -1px 0,
      rgba(0, 0, 0, .75) 0 1px 2px
    );
  }

  // Declarations
  border: 1px ridge $border;
  @include border-radius-s;
  @include box-shadow($border 0 0 1px 0 inset);
  @include font-size($font-size);
  font-weight: 700;
  color: $color;
  background-color: $background;
  @include background(
    linear-gradient(bottom, $background, lighten($background, 10%))
  );

  &:focus,
  &:hover {
    background: $background;
    outline: 0;
  }

  &:active {
    @include box-shadow(inset 0 0 10px -2px $border);
  }
}

// # Generic tools
//
// No styleguide reference.
// =================================================================================================
// rem fallback: http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
// 
// Provide a fallback in pixels for properties in rem.
//
// $values   - Values applied to the property   (1)
// $property - CSS property with a value in rem (font-size)
//
// Compatibility untested.
@mixin rem-fb($values: 1, $property: font-size) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}
